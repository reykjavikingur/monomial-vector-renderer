{"version":3,"sources":["node_modules/browserify/node_modules/browser-pack/_prelude.js","src/scripts/animator.js","src/scripts/graph-renderer.js","src/scripts/grapher.js","src/scripts/interval.js","src/scripts/listener.js","src/scripts/main.js","src/scripts/monomial.js","src/scripts/multi-button.js","src/scripts/multi-presser.js","src/scripts/point-renderer.js","src/scripts/polygon-spinner.js","src/scripts/spinner3d.js","src/scripts/spinner4d.js","src/scripts/vector.js"],"names":[],"mappings":"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","file":"main.js","sourcesContent":["(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require==\"function\"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error(\"Cannot find module '\"+o+\"'\");throw f.code=\"MODULE_NOT_FOUND\",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require==\"function\"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})","function Animator(fn) {\n    var goingToStep = false, running = false;\n    function animate() {\n        if (goingToStep || running) {\n            fn();\n            goingToStep = false;\n        }\n        window.requestAnimationFrame(animate);\n    }\n    animate();\n    return {\n        start() {\n            running = true;\n        },\n        stop() {\n            running = false;\n        },\n        step() {\n            goingToStep = true;\n        },\n        done() {\n            goingToStep = false;\n            running = false;\n        }\n    }\n}\n\nmodule.exports = Animator;\n","const Grapher = require('./grapher');\nconst Monomial = require('./monomial');\n\nfunction GraphRenderer(canvas, options) {\n    var grapher = Grapher(canvas, {\n        xmin: options.xmin, xmax: options.xmax,\n        ymin: options.ymin, ymax: options.ymax,\n    });\n    return {\n        render(vectors, colors) {\n            if (!colors) {\n                colors = ['black'];\n            }\n            var monomials = vectors.map(vector => Monomial.create(vector));\n            grapher.clear();\n            for (let i in monomials) {\n                let monomial = monomials[i];\n                let color = colors[i % colors.length];\n                grapher.graph(color, monomial);\n            }\n        },\n        get xmin() {\n            return options.xmin;\n        },\n        get ymin() {\n            return options.ymin;\n        },\n        get xmax() {\n            return options.xmax;\n        },\n        get ymax() {\n            return options.ymax;\n        },\n        done() {\n            grapher.done();\n        },\n    };\n}\n\nmodule.exports = GraphRenderer;\n","const Interval = require('./interval');\n\nfunction Grapher(canvas, options) {\n    var context = canvas.getContext('2d');\n    var w = canvas.width;\n    var h = canvas.height;\n\n    var interval = Interval({\n        xmin: options.xmin,\n        xmax: options.xmax,\n        ymin: options.ymin,\n        ymax: options.ymax,\n    });\n\n    clear();\n\n    function clear() {\n        context.save();\n        context.fillStyle = options.backgroundColor || 'white';\n        context.fillRect(0, 0, w, h);\n        context.restore();\n    }\n\n    return {\n        clear() {\n            clear();\n        },\n        graph(color, fn) {\n            context.save();\n            context.save();\n            var pw = interval.getPixelWidth(context);\n            var xmin = interval.xmin;\n            var xmax = interval.xmax;\n            interval.adjustCanvasContext(context);\n            context.beginPath();\n            context.moveTo(xmin, fn(xmin));\n            for (let x = xmin + pw; x <= xmax; x += pw) {\n                context.lineTo(x, fn(x));\n            }\n            context.restore();\n            context.lineJoin = 'round';\n            context.lineWidth = 2;\n            context.strokeStyle = color;\n            context.stroke();\n            context.restore();\n        },\n        done() {\n\n        }\n    }\n}\n\nmodule.exports = Grapher;\n","function Interval(options) {\n    var xmin = options.xmin;\n    var xmax = options.xmax;\n    var ymin = options.ymin;\n    var ymax = options.ymax;\n    var xrange = xmax - xmin;\n    var yrange = ymax - ymin;\n\n    return {\n        xmin: xmin,\n        xmax: xmax,\n        ymin: ymin,\n        ymax: ymax,\n        getPixelWidth(context) {\n            var w = context.canvas.width;\n            return xrange / w;\n        },\n        getPixelPosition(context, x, y) {\n            var w = context.canvas.width;\n            var h = context.canvas.height;\n            var xscale = w / xrange;\n            var yscale = h / yrange;\n            var xmid = Math.round(Math.abs(xmin / xrange) * w);\n            var ymid = Math.round(Math.abs(ymin / yrange) * h);\n            return [\n                x * xscale + xmid,\n                y * yscale + ymid,\n            ];\n        },\n        adjustCanvasContext(context) {\n            var w = context.canvas.width;\n            var h = context.canvas.height;\n            var xscale = w / xrange;\n            var yscale = h / yrange;\n            var xmid = Math.round(Math.abs(xmin / xrange) * w);\n            var ymid = Math.round(Math.abs(ymin / yrange) * h);\n            context.translate(xmid, ymid);\n            context.scale(xscale, -yscale);\n        },\n    };\n}\n\nmodule.exports = Interval;\n","function Listener(target, type, cb) {\n    target.addEventListener(type, cb);\n    return {\n        done() {\n            target.removeEventListener(type, cb);\n        }\n    }\n}\n\nmodule.exports = Listener;\n","console.log('starting main');\n\nconst Vector = require('./vector');\nconst PolygonSpinner = require('./polygon-spinner');\nconst Spinner3d = require('./spinner3d');\nconst Spinner4d = require('./spinner4d');\n\nconst template = `\n\n<h2>2d spinner</h2>\n<div class=\"container2\"></div>\n\n<h2>3d spinner</h2>\n<div class=\"container3\"></div>\n\n<h2>4d spinner</h2>\n<div class=\"container4\"></div>\n`;\n\nvar mainEl = document.querySelector('main');\n\nmainEl.innerHTML = template;\n\nPolygonSpinner(mainEl.querySelector('.container2'));\n\nSpinner3d(mainEl.querySelector('.container3'), {\n    points: Vector.cube(0.5),\n});\n\nSpinner4d(mainEl.querySelector('.container4'), {\n    points: Vector.hypercube(4, 1),\n});\n","const Monomial = {\n    create(coefficients) {\n        return x => {\n            var sum = 0;\n            for (let n in coefficients) {\n                let c = coefficients[n];\n                let xn = Math.pow(x, n);\n                sum += c * xn;\n            }\n            return sum;\n        };\n    },\n};\n\nmodule.exports = Monomial;\n","const Listener = require('./listener');\n\nfunction MultiButton(nodes, cb) {\n    var buttons = [];\n    for (let node of nodes) {\n        let button = Listener(node, 'click', event => {\n            setValue(event.target.value);\n        });\n        buttons.push(button);\n    }\n    return {\n        set value(v) {\n            setValue(v);\n        },\n        done() {\n            for (let button of buttons) {\n                button.done();\n            }\n        }\n    };\n    function setValue(value) {\n        for (let node of nodes) {\n            node.disabled = node.value === value;\n        }\n        cb(value);\n    }\n}\n\nmodule.exports = MultiButton;\n","const Listener = require('./listener');\n\nfunction MultiPresser(nodes, cb){\n    var ups = [];\n    var dns = [];\n    for (let node of nodes) {\n        let dn = Listener(node, 'mousedown', event => {\n            cb(event.target);\n        });\n        dns.push(dn);\n        let up = Listener(node, 'mouseup', event => {\n            cb(null);\n        });\n        ups.push(up);\n    }\n    return {\n        done() {\n            for (let dn of dns) {\n                dn.done();\n            }\n            for (let up of ups) {\n                up.done();\n            }\n        },\n    };\n}\n\nmodule.exports = MultiPresser;\n","const Vector = require('./vector');\nconst Interval = require('./interval');\n\nfunction PointRenderer(canvas, options) {\n    var context = canvas.getContext('2d');\n    var interval = Interval({\n        xmin: options.xmin, xmax: options.xmax,\n        ymin: options.ymin, ymax: options.ymax,\n    });\n    clear();\n    return {\n        render(points, colors) {\n            var colorize = Vector.colorizer(colors);\n            if (!colors) {\n                colors = ['black'];\n            }\n            clear();\n            for (let i in points) {\n                let color = colorize(points[i], i);\n                colors[i % colors.length];\n                let point = points[i];\n                var x = point[0];\n                var y = point[1];\n                var canvasPoint = interval.getPixelPosition(context, x, y);\n                var cx = canvasPoint[0];\n                var cy = canvasPoint[1];\n                context.save();\n                context.strokeStyle = color;\n                context.strokeRect(cx, cy, 2, 2);\n                context.restore();\n            }\n        },\n        done() {\n\n        }\n    };\n\n    function clear() {\n        context.save();\n        context.fillStyle = 'white';\n        context.fillRect(0, 0, canvas.width, canvas.height);\n        context.restore();\n    }\n}\n\nmodule.exports = PointRenderer;\n","const PointRenderer = require('./point-renderer');\nconst GraphRenderer = require('./graph-renderer');\nconst Animator = require('./animator');\nconst Vector = require('./vector');\nconst MultiPresser = require('./multi-presser');\n\nconst ROTATION_SPEED = 0.01;\n\nconst template = `\n<canvas class=\"graph-renderer\" width=\"256\" height=\"256\"></canvas>\n<canvas class=\"point-renderer\" width=\"256\" height=\"256\"></canvas>\n<input type=\"button\" value=\"-\" class=\"speed\"/>\n<input type=\"button\" value=\"+\" class=\"speed\"/>\n`;\n\nfunction PolygonSpinner(node, options) {\n\n    var mainEl = node;\n\n    node.innerHTML = template;\n\n    var graphCanvas = node.querySelector('canvas.graph-renderer');\n    var pointCanvas = node.querySelector('canvas.point-renderer');\n    var options = {\n        xmin: -2, xmax: 2,\n        ymin: -2, ymax: 2,\n    };\n    var graphRenderer = GraphRenderer(graphCanvas, options);\n    var pointRenderer = PointRenderer(pointCanvas, options);\n\n    var points = Vector.polygon(6, 1);\n\n    var rotationSpeed = 0;\n\n    var animator = Animator(() => {\n        var colors = ['red', 'yellow', 'green', 'cyan', 'blue', 'magenta'];\n        graphRenderer.render(points, colors);\n        pointRenderer.render(points, colors);\n        for (let i in points) {\n            points[i] = Vector.rotate(points[i], 0, 1, rotationSpeed);\n        }\n    });\n\n    var multiPresser = MultiPresser(node.querySelectorAll('input[type=\"button\"].speed'), target => {\n        if (target) {\n            switch (target.value) {\n                case '-':\n                    rotationSpeed = -ROTATION_SPEED;\n                    break;\n                case '+':\n                    rotationSpeed = ROTATION_SPEED;\n                    break;\n                default:\n                    break;\n            }\n            animator.start();\n        }\n        else {\n            rotationSpeed = 0;\n            animator.stop();\n        }\n    });\n\n    animator.step();\n\n    return {\n        done() {\n            animator.done();\n            graphRenderer.done();\n            pointRenderer.done();\n            multiPresser.done();\n        },\n    };\n\n}\n\nmodule.exports = PolygonSpinner;\n","const Vector = require('./vector');\nconst Animator = require('./animator');\nconst GraphRenderer = require('./graph-renderer');\nconst PointRenderer = require('./point-renderer');\nconst MultiButton = require('./multi-button');\nconst MultiPresser = require('./multi-presser');\n\nconst ROTATION_SPEED = 0.01;\n\nconst template = `\n<canvas width=\"256\" height=\"256\" class=\"graph-renderer\"></canvas>\n<canvas width=\"256\" height=\"256\" class=\"point-renderer\"></canvas>\n<input type=\"button\" value=\"x-y\" class=\"axis\"/>\n<input type=\"button\" value=\"y-z\" class=\"axis\"/>\n<input type=\"button\" value=\"x-z\" class=\"axis\"/>\n<input type=\"button\" value=\"-\" class=\"speed\"/>\n<input type=\"button\" value=\"+\" class=\"speed\"/>\n`;\n\nfunction Spinner3d(node, options) {\n\n    if (!options) {\n        options = {};\n    }\n\n    // vectors to render\n    var points = options.points || [];\n\n    // indices of axes to rotate\n    var rotation;\n\n    var rotationSpeed = 0;\n\n    node.innerHTML = template;\n\n    var rendererOptions = {\n        xmin: -2, xmax: 2,\n        ymin: -2, ymax: 2,\n    };\n    var graphRenderer = GraphRenderer(node.querySelector('canvas.graph-renderer'), rendererOptions);\n    var pointRenderer = PointRenderer(node.querySelector('canvas.point-renderer'), rendererOptions);\n\n    var animator = Animator(() => {\n        points = points.map(point => Vector.rotate(point, rotation[0], rotation[1], rotationSpeed));\n        graphRenderer.render(points);\n        pointRenderer.render(points, (point, index) => {\n            // z => c : 2 => 255, -2 => 0\n            var z = point[2];\n            var c = 63 * z + 127;\n            c = Math.max(0, Math.min(255, Math.round(c)));\n            return `rgb(${c}, ${c}, ${c})`;\n        });\n    });\n\n    var axisMultiButton = MultiButton(node.querySelectorAll('input[type=\"button\"].axis'), value => {\n        var parts = String(value).split('-');\n        var axes = ['x', 'y', 'z'];\n        var axis1 = axes.indexOf(parts[0]);\n        var axis2 = axes.indexOf(parts[1]);\n        rotation = [axis1, axis2];\n    });\n    axisMultiButton.value = 'x-y'; // initialize to default axis\n\n    var speedMultiButton = MultiPresser(node.querySelectorAll('input[type=\"button\"].speed'), target => {\n        if (target) {\n            switch (target.value) {\n                case '-':\n                    rotationSpeed = -ROTATION_SPEED;\n                    break;\n                case '+':\n                    rotationSpeed = ROTATION_SPEED;\n                    break;\n                default:\n                    break;\n            }\n            animator.start();\n        }\n        else {\n            rotationSpeed = 0;\n            animator.stop();\n        }\n    });\n\n    animator.step();\n\n    return {\n        done(){\n            graphRenderer.done();\n            pointRenderer.done();\n            animator.done();\n            axisMultiButton.done();\n            speedMultiButton.done();\n        }\n    }\n}\n\nmodule.exports = Spinner3d;\n","const Vector = require('./vector');\nconst Animator = require('./animator');\nconst GraphRenderer = require('./graph-renderer');\nconst PointRenderer = require('./point-renderer');\nconst MultiButton = require('./multi-button');\nconst MultiPresser = require('./multi-presser');\n\nconst ROTATION_SPEED = 0.01;\n\nconst template = `\n<canvas width=\"256\" height=\"256\" class=\"graph-renderer\"></canvas>\n<canvas width=\"256\" height=\"256\" class=\"point-renderer\"></canvas>\n<input type=\"button\" value=\"x-y\" class=\"axis\"/>\n<input type=\"button\" value=\"y-z\" class=\"axis\"/>\n<input type=\"button\" value=\"x-z\" class=\"axis\"/>\n<input type=\"button\" value=\"x-w\" class=\"axis\"/>\n<input type=\"button\" value=\"y-w\" class=\"axis\"/>\n<input type=\"button\" value=\"z-w\" class=\"axis\"/>\n<input type=\"button\" value=\"-\" class=\"speed\"/>\n<input type=\"button\" value=\"+\" class=\"speed\"/>\n`;\n\nfunction Spinner4d(node, options) {\n\n    if (!options) {\n        options = {};\n    }\n\n    // vectors to render\n    var points = options.points || [];\n    for (let i in points) {\n        while (points[i].length < 4) {\n            points[i].push(0);\n        }\n    }\n\n    // indices of axes to rotate\n    var rotation;\n\n    var rotationSpeed = 0;\n\n    node.innerHTML = template;\n\n    var rendererOptions = {\n        xmin: -2, xmax: 2,\n        ymin: -2, ymax: 2,\n    };\n    var graphRenderer = GraphRenderer(node.querySelector('canvas.graph-renderer'), rendererOptions);\n    var pointRenderer = PointRenderer(node.querySelector('canvas.point-renderer'), rendererOptions);\n\n    var animator = Animator(() => {\n        points = points.map(point => Vector.rotate(point, rotation[0], rotation[1], rotationSpeed));\n        graphRenderer.render(points);\n        pointRenderer.render(points, (point, index) => {\n            var z = point[2];\n            var w = point[3];\n            var lum = 0.25 * z + 0.5;\n            var sat = 0.25 * w + 0.5;\n            lum = Math.max(0, Math.min(100, Math.round(lum * 100)));\n            sat = Math.max(0, Math.min(100, Math.round(sat * 100)));\n            return `hsl(0, ${sat}%, ${lum}%)`;\n        });\n    });\n\n    var axisMultiButton = MultiButton(node.querySelectorAll('input[type=\"button\"].axis'), value => {\n        var parts = String(value).split('-');\n        var axes = ['x', 'y', 'z', 'w'];\n        var axis1 = axes.indexOf(parts[0]);\n        var axis2 = axes.indexOf(parts[1]);\n        rotation = [axis1, axis2];\n    });\n    axisMultiButton.value = 'x-y'; // initialize to default axis\n\n    var speedMultiButton = MultiPresser(node.querySelectorAll('input[type=\"button\"].speed'), target => {\n        if (target) {\n            switch (target.value) {\n                case '-':\n                    rotationSpeed = -ROTATION_SPEED;\n                    break;\n                case '+':\n                    rotationSpeed = ROTATION_SPEED;\n                    break;\n                default:\n                    break;\n            }\n            animator.start();\n        }\n        else {\n            rotationSpeed = 0;\n            animator.stop();\n        }\n    });\n\n    animator.step();\n\n    return {\n        done() {\n            graphRenderer.done();\n            pointRenderer.done();\n            animator.done();\n            axisMultiButton.done();\n            speedMultiButton.done();\n        }\n    };\n}\n\nmodule.exports = Spinner4d;","const TAU = Math.PI * 2;\n\nconst Vector = {\n    add(a, b) {\n        return a.map((ai, i) => a[i] + b[i]);\n    },\n    scale(s, a) {\n        return a.map(ai => s * ai);\n    },\n    rotate(a, u, v, angle) {\n        //console.log('rotating by', angle);\n        var cos = Math.cos(angle);\n        var sin = Math.sin(angle);\n        //console.log('cos', cos);\n        //console.log('sin', sin);\n        var b = a.map(ai => ai);\n        //console.log('initially', b);\n        b[u] = a[u] * cos - a[v] * sin;\n        b[v] = a[u] * sin + a[v] * cos;\n        return b;\n    },\n    polygon(n, r) {\n        // create regular polygon centered at origin with n points at radius r\n        var points = [];\n        for (let k = 0; k < n; k++) {\n            let angle = TAU * k / n;\n            let x = r * Math.cos(angle);\n            let y = r * Math.sin(angle);\n            points.push([x, y]);\n        }\n        return points;\n    },\n    cube(r) {\n        r *= Math.sqrt(3);\n        var points = [];\n        for (let x of [-r, r]) {\n            for (let y of [-r, r]) {\n                for (let z of [-r, r]) {\n                    points.push([x, y, z]);\n                }\n            }\n        }\n        return points;\n    },\n    hypercube(n, r) {\n        if (n == 1) {\n            // base case\n            return [[-r], [r]];\n        }\n        else {\n            var subpoints = this.hypercube(n - 1, r);\n            var points = [];\n            for (let subpoint of subpoints) {\n                var s1 = subpoint.slice();\n                var s2 = subpoint.slice();\n                s1.push(-r);\n                s2.push(r);\n                points.push(s1);\n                points.push(s2);\n            }\n            return points;\n        }\n    },\n    colorizer(source) {\n        if (!source) {\n            return (vector, index) => {\n                var z = vector[2] || 0;\n                var w = vector[3] || 0;\n                var angle = Math.atan2(w, z);\n                if (angle < 0) {\n                    angle += 2 * Math.PI;\n                }\n                var max = 2;\n                var magFactor = max * Math.sqrt(vector.length);\n\n                var mag = Math.sqrt(z * z + w * w);\n                var hue = Math.round(angle * 180 / Math.PI);\n                var sat = 100 + '%';\n                var lum = Math.round(mag * 100 / magFactor) + '%';\n                return `hsl(${hue}, ${sat}, ${lum})`;\n            };\n        }\n        else if (Array.isArray(source)) {\n            return (vector, index) => {\n                return source[index % source.length];\n            };\n        }\n        else if (typeof source === 'function') {\n            return source;\n        }\n        else {\n            throw new Error('invalid colorizer source');\n        }\n    },\n};\n\nmodule.exports = Vector;\n\n"],"preExistingComment":"//# sourceMappingURL=data:application/json;charset=utf-8;base64,"}